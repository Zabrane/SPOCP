#
# $Id: rules.txt,v 1.89 2005/11/28 09:56:09 kllin Exp $
#

#
# test
#

it-sysadm := "localgroup:{//uid[1]}:it-sysadm:${0}"
it-staff := "localgroup:{//uid[1]}:it-staff:${0}"
helpdesk := "localgroup:{//uid[1]}:helpdesk:${0}"
su-inst-staff-base := "ldapset:{//uid[1]}{//departmentNumber[1]}:ds-slave.su.se;dc=se;c=SE;{\\0$uid & ${0}}/eduPersonOrgUnitDN & {\\1$departmentNumber & ${1}}"
su-inst-staff-sub := "ldapset:{//uid[1]}{//departmentNumber[1]}:ds-slave.su.se;dc=se;c=SE;{{\\0$uid & ${0}}/eduPersonOrgUnitDN} & {{\\1$departmentNumber & ${1}}$objectClass & organizationalUnit}"

su-employee := "ldapset:{//uid[1]}:ds-slave.su.se;dc=se;{\\0$uid & ${0}}/eduPersonAffiliation & employee"
su-student := "ldapset:{//uid[1]}:ds-slave.su.se;dc=se;{\\0$uid & ${0}}/eduPersonAffiliation & student"
su-primary-student := "ldapset:{//uid[1]}:ds-slave.su.se;dc=se;{\\0$uid & ${0}}/eduPersonPrimaryAffiliation & student"

#it-staff-jids := "ldapset:{//uid[1]}:ds-slave.su.se;dc=se;{ \\0$cn & it-staff }/uniqueMember & { \\0$jabberID & {0} }/.."

(test (host 
       (* suffix .it.su.se)) 
      (uid)) => (ref it-sysadm)

(test3	(host (* suffix .it.su.se))
	(uid)) => (ref helpdesk)

(test2 (host (* suffix .it.su.se))
       (uid))

(isstudent (uid)) => (ref su-primary-student)

(nagiostest (uid su-nagiosd))

#
# lpw
#


(lpw (service Tentamen) 
     (departmentNumber)
     (uid)) => (or (ref su-inst-staff-base)(ref su-inst-staff-sub))

(lpw (service Register)
     (uid)) => (ref su-employee)

(lpw (service Adresslista)
     (uid)) => (ref su-employee)

(lpw (service Uppfolj)
     (uid)) => (ref su-employee)

# suservice

(suservice (uid)
           (service)
           (op password)
           (time))

(suservice (uid)
           (service (* set jabber 
                           urn:x-su:service:type:jabber 
                           netlogin 
                           urn:x-su:service:type:netlogin
                           webbproxy 
                           urn:x-su:service:type:webbproxy))
           (op activate)
           (time))

(suservice (uid)
           (service (* set "ppp" "urn:x-su:service:type:ppp"))
           (op activate)
           (time)) => (ref su-student)

# Test

(lpw (service Test)
     (uid)) => (ref su-primary-student)

# JEvent

(jevent (method)  (from leifj@su.se) (to))
(jevent (command) (from leifj@su.se) (to))
(jevent (method)  (from kllin@su.se) (to))
(jevent (command) (from kllin@su.se) (to))
(jevent (method)  (from swold@su.se) (to))
(jevent (command) (from swold@su.se) (to))
(jevent (method)  (from aroos@su.se) (to))
(jevent (command) (from aroos@su.se) (to))
(jevent (method)  (from user@cdr.su.se) (to))
(jevent (command) (from user@cdr.su.se) (to))

# http

#(http (protocol)
#      (vhost)
#      (resource)
#      (authtype)
#      (client
#        (hostname)
#        (ip))
#      (user
#        (principal
#          (uid)
#          (realm))
#      )
#)

(http (protocol)
      (vhost sauron.it.secure.su.se)
      (resource netmrg)
      (authtype SUKATID)
      (client
        (hostname)
        (ip))
      (user
        (principal
          (uid)
          (realm SU.SE))
      )
) => (ref it-staff)

(http (protocol)
      (vhost public.it.secure.su.se)
      (resource SUintranet)
      (authtype SUKATID)
      (client
        (hostname)
        (ip))
      (user
        (principal
          (uid)
          (realm SU.SE))
      )
) => (ref su-employee)



# j2ee roles
# Used by SPOCPAuthzRealm from within tomcat or jboss
(j2ee-role (identity
               (uid)
               (realm SU.SE))
           (role afsadm-manager)) => (ref it-staff)

(j2ee-role (identity
               (uid su-mutant)
               (realm SU.SE))
           (role afsadm-manager))

(j2ee-role (identity
               (uid)
               (realm SU.SE))
           (role JBossAdmin)) => (ref it-staff)

(j2ee-role (identity
               (uid)
	       (realm SU.SE))
           (role svn-manager)) => (ref it-sysadm)

(j2ee-role (identity (uid) (realm SU.SE)) (role svn-event-publisher))

(j2ee-role (uid)
           (role svn-manager)) => (ref it-sysadm)

# mutant
(mutant    (controller (* set afsquota event))
           (action)
           (uid)
           (env production)
           (host cimex.it.su.se)
) => (ref it-staff)

(mutant    (controller (* set afsquota event))
           (action)
           (uid)
           (env production)
           (host webbapp1.it.su.se)
) => (or (ref helpdesk)(ref it-sysadm))

(mutant    (controller)
           (action)
           (uid)
           (env (* set development test))
           (host)
)

# this is protected by certificate, so we trust apache for authorizing this
(mutant (controller api afsquota)
        (action)
        (uid)
        (env production)
        (host)
)

# this allows anyone to put a query
//lingon.catalogix.se/operation/(operation QUERY(server(ip)(host)))
//lingon.catalogix.se/operation/(operation LOGOUT(server(ip)(host)))